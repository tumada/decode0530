{
  "name": "miniwrite",
  "description": "Minimal semantic output writer",
  "version": "0.1.3",
  "homepage": "https://github.com/Bartvds/miniwrite",
  "author": {
    "name": "Bart van der Schoor",
    "url": "https://github.com/Bartvds"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Bartvds/miniwrite"
  },
  "bugs": {
    "url": "https://github.com/Bartvds/miniwrite/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/miniwrite/blob/master/LICENSE-MIT"
    }
  ],
  "keywords": [
    "cli",
    "ansi",
    "text",
    "color",
    "stream",
    "adapter",
    "writer"
  ],
  "main": "lib/",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "mkdirp": "~0.3.5"
  },
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.0",
    "grunt-mocha-test": "~0.7.0",
    "mocha-unfunk-reporter": "~0.3.7",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-jshint": "~0.7.2",
    "jshint-path-reporter": "~0.1.3",
    "chai": "~1.8.1"
  },
  "readme": "# miniwrite\n\n[![Build Status](https://secure.travis-ci.org/Bartvds/miniwrite.png?branch=master)](http://travis-ci.org/Bartvds/miniwrite) [![Dependency Status](https://gemnasium.com/Bartvds/miniwrite.png)](https://gemnasium.com/Bartvds/miniwrite) [![NPM version](https://badge.fury.io/js/miniwrite.png)](http://badge.fury.io/js/miniwrite)\n\n> Minimal output-stream writer API. \n\nA pluggable output writer interface/adapter to embed/expose in tools and reporters, also a simplified stream.  \n\nThis is not a logging framework or full console or stream replacement. Instead this is an abstraction to build on or expose in other tools. Intend as companion to [ministyle](https://github.com/Bartvds/ministyle) (et al).\n\n## API\n\nMain usage:\n````js\n// simplified node.js.browser compatible console.log()\nvar mw = miniwrite.console();\n\n// write plain text line\nmw.writeln('hello world!');\n````\n\n## Helpers\n\nBuffer writes:\n````js\n// buffer own lines\nvar mw = miniwrite.buffer();\n// buffer other writes (handy for testing)\nvar mw = miniwrite.buffer(myMiniWrite);\n\n// get buffer\nvar str = mw.concat();\nvar str = mw.concat('\\n\\n', '\\t');\n// iterate buffer if you must\nmw.lines.forEach(function(line) {\n\t//..\n})\n// clear buffer\nmw.clear();\n````\n\nAdapter to buffer character writes via `mw.write(chars)`, auto-flushes on newlines:\n````js\nvar mw = miniwrite.chars(miniwrite.console());\n\n// write plain text line\nmw.write('hello');\nmw.write(' ');\nmw.writeln('world!'); // \"hello world\\n\"\n\n//or accumulate chars\nmw.write('one');\nmw.write('two');\nmw.flush(true); // onetwo\n\n// clear buffer\nmw.write('one');\nmw.clear();\nmw.write('two');\nmw.flush(true); // two\n\n````\n\nSpread of multiple writers\n````js\nvar mw = miniwrite.multi([myANSIConsole, myRemoteSocket, myDiskLogger]);\nmw.enabled = true;\nmw.targets.forEach(function(subw, num) {\n\t// .. \n});\n````\n\nProxy to toggle stream or swap output target:\n````js\nvar mw = miniwrite.peek(myMiniWrite, callback);\nmw.enabled = true;\nmw.target = myOherWrite;\nmw.callback = function(line) {\n\t// return string, or false to ignore\n});\n````\n\nProxy to toggle stream or swap output target:\n````js\nvar mw = miniwrite.proxy(myMiniWrite);\nmw.enabled = true;\nmw.target = myOherWrite;\nmw.target = myOherWrite;\n````\n\nConvenience preset for [grunt](https://github.com/gruntjs/grunt) (same as in `grunt ~0.4.1`):\n````js\nvar mw = miniwrite.grunt(grunt);\n````\n## Examples\n\nBuild your own:\n````js\nvar mw = {};\nmw.writeln = function(line) {\n\tmyWebSocketHyperStream.send({line: line})\n};\n// pass to supporting tools\nawesomeModule.useMiniWritePlz(mw);\n````\n\nTap into output\n````js\nawesomeModule.writer = miniwrite.splitter([awesomeModule.writer, myMiniWrite]);\n````\n\n## Installation \n\n```shell\n$ npm install miniwrite --save\n```\n\n## History\n\n* 0.1.2 - Enabled strict mode, split in internal modules\n* 0.1.0 - Extracted styling to [ministyle](https://github.com/Bartvds/ministyle).\n* 0.0.1 - Extracted code from existing projects\n\n## Build\n\nInstall development dependencies in your git checkout:\n\n    $ npm install\n\n~Build and run tests:\n\n    $ grunt\n\nSee the `Gruntfile.js` for additional commands.\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n*Note:* this is an opinionated module: please create a [ticket](https://github.com/Bartvds/miniwrite/issues) to discuss any big ideas. Pull requests for bug fixes are of course always welcome. \n\n## License\n\nCopyright (c) 2013 Bart van der Schoor\n\nLicensed under the MIT license.",
  "readmeFilename": "README.md",
  "_id": "miniwrite@0.1.3",
  "dist": {
    "shasum": "7b01158f51f95cd1a33ebb3f0212d3accf963261"
  },
  "_from": "miniwrite@~0.1.3",
  "_resolved": "https://registry.npmjs.org/miniwrite/-/miniwrite-0.1.3.tgz"
}
