{
  "name": "tv4-reporter",
  "description": "Report Tiny Validator tv4 results in usable formats",
  "version": "0.0.4",
  "homepage": "https://github.com/Bartvds/tv4-reporter",
  "author": {
    "name": "Bart van der Schoor",
    "url": "https://github.com/Bartvds"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Bartvds/tv4-reporter"
  },
  "bugs": {
    "url": "https://github.com/Bartvds/tv4-reporter/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Bartvds/tv4-reporter/blob/master/LICENSE-MIT"
    }
  ],
  "keywords": [
    "tv4",
    "format",
    "reporter",
    "json-schema"
  ],
  "main": "lib/reporter.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "ministyle": "~0.1.0",
    "miniwrite": "~0.1.0",
    "jsonpointer.js": "0.3.0"
  },
  "devDependencies": {
    "tv4": "~1.0.11",
    "grunt-cli": "~0.1",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "jshint-path-reporter": "~0.1.3"
  },
  "perDependencies": {
    "tv4": "~1.0.11",
    "ministyle": "~0.1.0",
    "miniwrite": "~0.1.0"
  },
  "readme": "# tv4-reporter\r\n\r\n[![Build Status](https://secure.travis-ci.org/Bartvds/tv4-reporter.png?branch=master)](http://travis-ci.org/Bartvds/tv4-reporter) [![Dependency Status](https://gemnasium.com/Bartvds/tv4-reporter.png)](https://gemnasium.com/Bartvds/tv4-reporter) [![NPM version](https://badge.fury.io/js/tv4-reporter.png)](http://badge.fury.io/js/tv4-reporter)\r\n\r\n> Reporters to display usable [Tiny Validator tv4](https://github.com/geraintluff/tv4) output of [json-schema](http://jsonschema.org) validation.\r\n \r\nThis module is used by various dependants to render `tv4` validation result objects in a compact but highly readable (and possibly colourful) format. Functionality is tuned for both CLI output as well as plain-text or pre-formatted HTML/CSS. \r\n\r\n**Note:** at this point this is *not* a 'validator' or 'test runner', nor is it a finished application. It is a library to use as dependency in `tv4` based testers. Use plain `tv4` and pass the result(s) to one of `tv4-reporters` helpers. If you are looking for a validator see one of the implementing tv4 wrappers for convenience (some linked below). \r\n\r\n## Features\r\n\r\n* Indented, tree-like display.\r\n* Single and multiple errors.\r\n* Optionally display summaries.\r\n* Recursive sub-errors (as generated by `anyOf`, `oneOf` etc).\r\n* Missing sub-schemas (optionally report as fail or pass reason).\r\n* Various output writer/coloriser modes using [ministyle](https://github.com/Bartvds/ministyle) and [miniwrite](https://github.com/Bartvds/miniwrite).\r\n\r\n## Examples\r\n\r\n(possibly outdated)\r\n\r\n1. Examples of many different kind of errors in [this Travis-Ci build](https://travis-ci.org/Bartvds/grunt-tv4/jobs/14469941).\r\n1. Bulk reporter with single error:\r\n \r\n  [![WebStorm example](https://raw.github.com/Bartvds/tv4-reporter/master/media/webstorm-example-01.png)](https://raw.github.com/Bartvds/tv4-reporter/master/media/webstorm-example-01.png)\r\n\r\n## Installation\r\n\r\n```shell\r\n$ npm install tv4-reporter --save-dev\r\n```\r\n\r\n## Usage\r\n\r\nStill very-much in flux so possibly outdated examples. \r\n\r\nMinimal use case (likely this is spread over the implementing application):\r\n````js\r\n// assemble the components\r\nvar tv4 = require('tv4');\r\nvar out = require('miniwrite').console();\r\nvar style = require('ministyle').ansi();\r\nvar reporter = require('tv4-reporter').getReporter(out, style);\r\n\r\n// now validate\r\nvar result = tv4.validateMultiple(myValue, mySchema);\r\nif (!result.valid || result.missing.length > 0) {\r\n\t// get data object (might get these in bulk/async from somewhere)\r\n\tvar res = reporter.createTest(mySchema, myValue, 'my special test', true);\r\n\t\r\n\t// report error\r\n\treporter.reportResult(res);\r\n\r\n\t// if you have a many results you can use bulk to print nicely with summaries\r\n\treporter.reportBulk([res, res2, res3], [pass1, pass2]);\r\n\t\r\n\t// only totals\r\n\treporter.reportTotals(3, 4);\r\n}\r\n````\r\n\r\nBulk reporting:\r\n````js\r\n// if you have a many results you can use bulk to print nicely with summaries\r\nreporter.reportBulk([res, res2, res3], [pass1, pass2]);\r\n\r\n// only totals\r\nreporter.reportTotals(3, 4);\r\n````\r\n\r\nFor more API surface like (partial) reporter and various helpers see the exports in the main module. Also see the 'known dependants' for more examples.\r\n\r\n## Output\r\n\r\nReport output and styling done via extensible mini-api's:\r\n \r\n* [ministyle](https://github.com/Bartvds/ministyle) (bundled with plain, ansi, html/css etc + utils)\r\n* [miniwrite](https://github.com/Bartvds/miniwrite) (bundled with streaming console.log, line buffer, node-streams etc + utils)\r\n\r\n## Known dependants\r\n\r\n* [grunt-tv4](https://github.com/Bartvds/grunt-tv4) (bulk validator with http lookup for grunt)\r\n* ~~[chai-json-schema](https://github.com/Bartvds/chai-json-schema) (assertion wrappers)~~ (update in progress)\r\n* (planned) a commandline validator (cued for extraction from `grunt-tv4`)\r\n* (planned) a json-schema assert()-ion (chai-json-schema without chai)\r\n\r\n## Future\r\n\r\n1. Output will likely be tuned over time.\r\n1. Current version is very functional but doesn't yet do anything specific for each validation rule type.\r\n\r\n## History\r\n\r\n* <= 0.0.4 - Many fixes and tweaks.\r\n* 0.0.1 - Extracted formatting code from [grunt-tv4](https://github.com/Bartvds/grunt-tv4) and [chai-json-schema](https://github.com/Bartvds/chai-json-schema).\r\n\r\n## Build\r\n\r\nNothing much here as the code is still being extracted from the original projects.\r\n\r\n~~Install development dependencies in your git checkout:~~\r\n\r\n    $ npm install\r\n\r\n~~Build and run tests:~~\r\n\r\n    $ grunt\r\n\r\nSee the `Gruntfile.js` for additional commands.\r\n\r\n## Contributing\r\n\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n*Note:* this is an opinionated module: please create a [ticket](https://github.com/Bartvds/tv4-reporter/issues) to discuss any big ideas. Pull requests for bug fixes are of course always welcome. \r\n\r\n## License\r\n\r\nCopyright (c) 2013 Bart van der Schoor\r\n\r\nLicensed under the MIT license.\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/Bartvds/tv4-reporter/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "tv4-reporter@0.0.4",
  "dist": {
    "shasum": "f29029999d6597efbc0b1837fde55b483af8e646"
  },
  "_from": "tv4-reporter@~0.0.4",
  "_resolved": "https://registry.npmjs.org/tv4-reporter/-/tv4-reporter-0.0.4.tgz"
}
